#include <iostream>
#include <vector>

using namespace std;

class Matrix {
private:
    vector<vector<int>> data;
    size_t rows;
    size_t cols;

public:
    Matrix(size_t rows, size_t cols) : rows(rows), cols(cols) {
        data.resize(rows, vector<int>(cols, 0));
    }

    Matrix operator+(const Matrix& other) const {
        if (rows != other.rows || cols != other.cols) {
            throw invalid_argument("Matrices must have the same dimensions for addition.");
        }
        Matrix result(rows, cols);
        for (size_t i = 0; i < rows; ++i) {
            for (size_t j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] + other.data[i][j];
            }
        }
        return result;
    }

    Matrix operator-(const Matrix& other) const {
        if (rows != other.rows || cols != other.cols) {
            throw invalid_argument("Matrices must have the same dimensions for subtraction.");
        }
        Matrix result(rows, cols);
        for (size_t i = 0; i < rows; ++i) {
            for (size_t j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] - other.data[i][j];
            }
        }
        return result;
    }

    Matrix operator*(const Matrix& other) const {
        if (cols != other.rows) {
            throw invalid_argument("Number of columns in first matrix must equal the number of rows in second matrix for multiplication.");
        }
        Matrix result(rows, other.cols);
        for (size_t i = 0; i < rows; ++i) {
            for (size_t j = 0; j < other.cols; ++j) {
                for (size_t k = 0; k < cols; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }

    friend ostream& operator<<(ostream& os, const Matrix& matrix) {
        for (size_t i = 0; i < matrix.rows; ++i) {
            for (size_t j = 0; j < matrix.cols; ++j) {
                os << matrix.data[i][j] << ' ';
            }
            os << '\n';
        }
        return os;
    }

    friend istream& operator>>(istream& is, Matrix& matrix) {
        for (size_t i = 0; i < matrix.rows; ++i) {
            for (size_t j = 0; j < matrix.cols; ++j) {
                is >> matrix.data[i][j];
            }
        }
        return is;
    }
};

int main() {
    Matrix A(2, 3);
    Matrix B(3, 2);

    cout << "Enter elements of matrix A:\n";
    cin >> A;
    cout << "Enter elements of matrix B:\n";
    cin >> B;

    cout << "Matrix A:\n" << A << "\nMatrix B:\n" << B;

    try {
        Matrix C = A + B;
        cout << "A + B:\n" << C;
    } catch (const invalid_argument& e) {
        cerr << e.what() << '\n';
    }

    try {
        Matrix D = A - B;
        cout << "A - B:\n" << D;
    } catch (const invalid_argument& e) {
        cerr << e.what() << '\n';
    }

    try {
        Matrix E = A * B;
        cout << "A * B:\n" << E;
    } catch (const invalid_argument& e) {
        cerr << e.what() << '\n';
    }

    return 0;
}
